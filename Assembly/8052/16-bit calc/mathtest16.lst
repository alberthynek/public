0000              1   ; mathtest.asm:  Examples using math16.asm routines
0000              2   
                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              4   org 0000H
0000 020217       5      ljmp MyProgram
0003              6   
0030              7   dseg at 30h
0030              8   x:    ds 2
0032              9   y:    ds 2
0034             10   bcd:  ds 3
0037             11   
0000             12   bseg
0000             13   mf:   dbit 1
0001             14   
0001             15   
                 -1   $include(math16.asm)
                428   $LIST
01DD             17   
01DD             18   CSEG
01DD             19   
01DD             20   ; Look-up table for 7-seg displays. 
01DD             21   T_7seg:
01DD 40792430    22       DB 40H, 79H, 24H, 30H, 19H
     19
01E2 12027800    23       DB 12H, 02H, 78H, 00H, 10H
     10
01E7             24   
01E7             25   ; An unsigned 16-bit number results in a 5-digit BCD number.
01E7             26   ; Use HEX0 to HEX4 to display it
01E7             27   Display_BCD:
01E7             28            
01E7 9001DD      29            mov dptr, #T_7seg
01EA             30   
01EA E536        31            mov a, bcd+2
01EC 540F        32            anl a, #0FH
01EE 93          33            movc a, @a+dptr
01EF F58E        34            mov HEX4, a
01F1             35            
01F1 E535        36            mov a, bcd+1
01F3 C4          37            swap a
01F4 540F        38            anl a, #0FH
01F6 93          39            movc a, @a+dptr
01F7 F594        40            mov HEX3, a
01F9             41            
01F9 E535        42            mov a, bcd+1
01FB 540F        43            anl a, #0FH
01FD 93          44            movc a, @a+dptr
01FE F593        45            mov HEX2, a
0200             46   
0200 E534        47            mov a, bcd+0
0202 C4          48            swap a
0203 540F        49            anl a, #0FH
0205 93          50            movc a, @a+dptr
0206 F592        51            mov HEX1, a
0208             52            
0208 E534        53            mov a, bcd+0
020A 540F        54            anl a, #0FH
020C 93          55            movc a, @a+dptr
020D F591        56            mov HEX0, a
020F             57            
020F 22          58            ret
0210             59   
0210             60   wait_for_key1:
0210             61   key1_is_one:
0210 20F9FD      62            jb KEY.1, key1_is_one ; loop while the button is not pressed
0213             63   key1_is_zero:
0213 30F9FD      64            jnb KEY.1, key1_is_zero ; loop while the button is pressed
0216 22          65            ret
0217             66   
0217             67   ; A handy macro to perform an operation and display the result.
                 68   domath mac
                 69   	Load_x(%0)
                 70   	Load_y(%1)
                 71   	lcall %2
                 72   	lcall hex2bcd
                 73   	lcall Display_BCD
                 74   	lcall wait_for_key1
                 75   endmac
0217             76   
0217             77   
0217             78   MyProgram:
0217 75817F      79            mov sp, #07FH ; Initialize the stack pointer
021A             80            ; For the health of your eyes, turn off all LEDs!
021A E4          81            clr a
021B F5F8        82            mov LEDG,  a
021D F5E8        83            mov LEDRA, a
021F F595        84            mov LEDRB, a
0221 F59E        85            mov LEDRC, a
0223             86   
0223             87   Forever:
0223             88            ; Try multiplying 1234 x 10 = 12340
0223 7530D2      89            mov x+0, #low(1234)
0226 753104      90            mov x+1, #high(1234)
0229 75320A      91            mov y+0, #low(10)
022C 753300      92            mov y+1, #high(10)
022F             93            ; mul16 and hex2bcd are in math16.asm
022F 12010C      94            lcall mul16
0232 120003      95            lcall hex2bcd
0235             96            ; display the result
0235 1201E7      97            lcall Display_BCD
0238             98            ; Now wait for key1 to be pressed and released so we can see the result.
0238 120210      99            lcall wait_for_key1
023B            100            
023B            101            ; There is a macro defined in math16.asm that can be used to load constants
023B            102            ; to variables x and y. The same code above may be written as:
023B 7530D2     103            mov x+0, #low (1234) 
023E 753104     103            mov x+1, #high(1234) 
0241 753214     104            mov y+0, #low (20) 
0244 753300     104            mov y+1, #high(20) 
0247 12010C     105            lcall mul16
024A 120003     106            lcall hex2bcd
024D 1201E7     107            lcall Display_BCD
0250 120210     108            lcall wait_for_key1
0253            109   
0253            110            ; The 'domath' macro defined above makes the code even easier to read.
0253            111            ; It includes load_x, load_y, operation, Display_BCD, and wait_for_key1:
0253            112            
0253            113            ;  44444/11 = 4040
0253 75309C     114            mov x+0, #low (44444) 
0256 7531AD     114            mov x+1, #high(44444) 
0259 75320B     114            mov y+0, #low (11) 
025C 753300     114            mov y+1, #high(11) 
025F 120188     114            lcall div16
0262 120003     114            lcall hex2bcd
0265 1201E7     114            lcall Display_BCD
0268 120210     114            lcall wait_for_key1
026B            115            ;  1000/10 = 100
026B 7530E8     116            mov x+0, #low (1000) 
026E 753103     116            mov x+1, #high(1000) 
0271 75320A     116            mov y+0, #low (10) 
0274 753300     116            mov y+1, #high(10) 
0277 120188     116            lcall div16
027A 120003     116            lcall hex2bcd
027D 1201E7     116            lcall Display_BCD
0280 120210     116            lcall wait_for_key1
0283            117            
0283            118            ; x/0=65535 (the largest 16-bit number)
0283 75309C     119            mov x+0, #low (44444) 
0286 7531AD     119            mov x+1, #high(44444) 
0289 753200     119            mov y+0, #low (0) 
028C 753300     119            mov y+1, #high(0) 
028F 120188     119            lcall div16
0292 120003     119            lcall hex2bcd
0295 1201E7     119            lcall Display_BCD
0298 120210     119            lcall wait_for_key1
029B            120            
029B            121            ; 55555/55555=1
029B 753003     122            mov x+0, #low (55555) 
029E 7531D9     122            mov x+1, #high(55555) 
02A1 753203     122            mov y+0, #low (55555) 
02A4 7533D9     122            mov y+1, #high(55555) 
02A7 120188     122            lcall div16
02AA 120003     122            lcall hex2bcd
02AD 1201E7     122            lcall Display_BCD
02B0 120210     122            lcall wait_for_key1
02B3            123   
02B3            124            ; 1234+4567=5801
02B3 7530D2     125            mov x+0, #low (1234) 
02B6 753104     125            mov x+1, #high(1234) 
02B9 7532D7     125            mov y+0, #low (4567) 
02BC 753311     125            mov y+1, #high(4567) 
02BF 12008B     125            lcall add16
02C2 120003     125            lcall hex2bcd
02C5 1201E7     125            lcall Display_BCD
02C8 120210     125            lcall wait_for_key1
02CB            126   
02CB            127            ; 4567-1234=3333
02CB 7530D7     128            mov x+0, #low (4567) 
02CE 753111     128            mov x+1, #high(4567) 
02D1 7532D2     128            mov y+0, #low (1234) 
02D4 753304     128            mov y+1, #high(1234) 
02D7 1200A0     128            lcall sub16
02DA 120003     128            lcall hex2bcd
02DD 1201E7     128            lcall Display_BCD
02E0 120210     128            lcall wait_for_key1
02E3            129   
02E3            130            ; sqrt(20736)=144
02E3 753000     131            mov x+0, #low (20736) 
02E6 753151     131            mov x+1, #high(20736) 
02E9 753200     131            mov y+0, #low (0) 
02EC 753300     131            mov y+1, #high(0) 
02EF 120142     131            lcall sqrt16
02F2 120003     131            lcall hex2bcd
02F5 1201E7     131            lcall Display_BCD
02F8 120210     131            lcall wait_for_key1
02FB            132            
02FB 7530FF     133            mov x+0, #low (255) 
02FE 753100     133            mov x+1, #high(255) 
0301 7532FF     134            mov y+0, #low (255) 
0304 753300     134            mov y+1, #high(255) 
0307 12010C     135            lcall mul16
030A 120142     136            lcall sqrt16 ; should display 255
030D 120003     137            lcall hex2bcd
0310 1201E7     138            lcall Display_BCD
0313 120210     139            lcall wait_for_key1
0316            140            
0316 020223     141            ljmp Forever
0319            142            
0319            143   END
