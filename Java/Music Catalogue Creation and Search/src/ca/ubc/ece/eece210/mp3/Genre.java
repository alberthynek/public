package ca.ubc.ece.eece210.mp3;

/**
 * Represents a genre (or collection of albums/genres).
 * 
 * @author Sathish Gopalakrishnan
 * 
 */
public final class Genre extends Element {
	
	private String name;
	
	/**
	 * Creates a new genre with the given name.
	 * 
	 * @param name
	 *            the name of the genre.
	 */
	
	
	public Genre(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}

	/**
	 * Restores a genre from its given string representation. This includes all sub-genres and albums contained within
	 * 
	 * @param stringRepresentation: The string representation of the genre to be restored (must be formatted correctly)
	 */
	public static Genre restoreCollection(String stringRepresentation) {
		Genre internalGenre;
		
		String name = new String();
		int i = 1;
		while (stringRepresentation.charAt(i) != '"' && stringRepresentation.charAt(i+1) != ';'){
			name = name.concat(stringRepresentation.substring(i, i+1));
			i++;
		}
		i+=2;
		internalGenre = new Genre(name);
		
		for(; i < stringRepresentation.length(); i++){
			int j = i+1;
			if (stringRepresentation.charAt(i) == '['){
				i++;
				int openBracs = 0;
				while (stringRepresentation.charAt(j) != ']' || stringRepresentation.charAt(j+1) !=  ';'
						&& openBracs == 0){
					if (stringRepresentation.charAt(j) == '[')
						openBracs++;
					if (stringRepresentation.charAt(j) == ']')
						openBracs--;
					j++;
				}
				internalGenre.addToGenre(Genre.restoreCollection(stringRepresentation.substring(i,j)));
			}
			
			else if (stringRepresentation.charAt(i) == '('){
				i++;
				while (stringRepresentation.charAt(j) != ')' && stringRepresentation.charAt(j+1) != ';')
					j++;
				new Album(stringRepresentation.substring(i,j+1)).addToGenre(internalGenre);
			}
			i++;
		}
			return internalGenre;
	}

	/**
	 * Returns the string representation of a genre, including all sub-genres and albums contained within
	 * 
	 * @return the string representation of a genre
	 */
	public String getStringRepresentation() {
		
		String stringRep = new String("\"" + name + "\"" + ";");
		for (int i = 0; i < this.getChildren().size(); i++){
			if (this.getChildren().get(i).hasChildren())
				stringRep = stringRep.concat("[" + this.getChildren().get(i) + "];");
			else
				stringRep = stringRep.concat("(" + this.getChildren().get(i) + ");");
		}

		return stringRep;
	}

	/**
	 * Adds the given album or genre to this genre
	 * 
	 * @param b
	 *            the element to be added to the collection.
	 */
	public void addToGenre(Element b) {
			addChild(b);

	}

	/**
	 * Returns true, since a genre can contain other albums and/or
	 * genres.
	 * @return true (always)
	 */
	@Override
	public boolean hasChildren() {
		return true;
	}
	
	/**
	 * Overrides default toString method, returning the Genre's string representation when it treated as a string
	 * @return the string representation of the Genre (generated by getStringRepresentation())
	 */
	@Override
	public String toString(){
	return getStringRepresentation();
	}
	
	/**
	 * Overrides default equals method
	 * Returns true if objects have same references or if genres have same names
	 * @param object
	 * 			The object being compared to this
	 * @return Whether or not the objects are equal according to the the equality rules outlined
	 */
	@Override
	public boolean equals(Object object){
		Genre genre;
		if (object instanceof Genre)
			genre  = (Genre)object;
		else return false;
		
		if (this!=genre){
			if (this.hashCode()!=genre.hashCode()) return false;
			if (this.getName().equals(genre.getName()))
				return true;
			else
				return false;
		}
		else
			return true;
	}

	@Override
	public int hashCode(){
		final int prime = 7;
		int result = 1;
		result = prime * result + ((name == null ) ? 0 : name.hashCode() );
		result = prime * result;
		return result;
	}

}
